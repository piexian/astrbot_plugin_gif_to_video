name: Auto Tag on Version Update

on:
  push:
    branches: [ master, main ]
    paths:
      - 'metadata.yaml'

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    container: python:3.11-slim
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录以便比较

    - name: Install git
      run: |
        apt-get update
        apt-get install -y git
        
    - name: Install PyYAML
      run: pip install PyYAML
      
    - name: Extract version from metadata.yaml
      id: get-version
      run: |
        python3 -c "import yaml; f=open('metadata.yaml', 'r'); data=yaml.safe_load(f); f.close(); version=data.get('version', ''); print(f'VERSION={version}') if version else None" >> $GITHUB_OUTPUT
        
    - name: Check if tag already exists
      id: check-tag
      run: |
        VERSION='${{ steps.get-version.outputs.VERSION }}'
        if git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create and push tag
      if: steps.check-tag.outputs.exists == 'false'
      run: |
        VERSION='${{ steps.get-version.outputs.VERSION }}'
        echo "Creating tag v$VERSION"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$VERSION" -m "v$VERSION: 自动发布版本"
        git push origin "v$VERSION"
        
    - name: Read Changelog
      if: steps.check-tag.outputs.exists == 'false'
      id: read-changelog
      run: |
        VERSION="${{ steps.get-version.outputs.VERSION }}"
        # 提取CHANGELOG.md中对应版本的更新日志
        # 使用sed提取从"## [${VERSION}]"开始到下一个"## ["或文件结尾的内容
        sed -n "/^## \[${VERSION}\]/,/^## \[/p" CHANGELOG.md | sed '$d' > changelog_${VERSION}.md
        # 如果文件为空或不存在，使用默认消息
        if [ ! -s "changelog_${VERSION}.md" ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "# AstrBot GIF转视频插件 v${VERSION} 发布" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🎉 版本更新" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "AstrBot GIF转视频插件 v${VERSION} 现已发布！本次更新主要包含以下改进和修复。" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "查看CHANGELOG.md了解详细信息。" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # 添加版本标题
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "# AstrBot GIF转视频插件 v${VERSION} 发布" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          cat "changelog_${VERSION}.md" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📦 安装和更新" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 更新现有安装" >> $GITHUB_OUTPUT
          echo "如果您已经安装了之前的版本，可以通过以下方式更新：" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "1. 在AstrBot WebUI的插件管理页面找到此插件" >> $GITHUB_OUTPUT
          echo "2. 点击\"管理\" → \"重载插件\"" >> $GITHUB_OUTPUT
          echo "3. 或者重新克隆/下载最新版本的插件" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 全新安装" >> $GITHUB_OUTPUT
          echo "1. 下载最新版本的插件到AstrBot的plugins目录" >> $GITHUB_OUTPUT
          echo "2. 确保已安装所有依赖（FFmpeg和Python包）" >> $GITHUB_OUTPUT
          echo "3. 重启AstrBot或重载插件" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      if: steps.check-tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get-version.outputs.VERSION }}
        name: v${{ steps.get-version.outputs.VERSION }}
        body: ${{ steps.read-changelog.outputs.changelog }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
